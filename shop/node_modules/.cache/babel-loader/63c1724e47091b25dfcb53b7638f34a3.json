{"ast":null,"code":"import axios from 'axios';\nconst guestInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true\n});\nconst authInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true\n}); // добавляем в запрос данные для авторизации с помощью перехватчика (interceptor)\n\nconst authInterceptor = config => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    config.headers.authorization = 'Bearer ' + localStorage.getItem('token');\n  }\n\n  return config;\n};\n\nauthInstance.interceptors.request.use(authInterceptor);\nexport { guestInstance, authInstance };","map":{"version":3,"sources":["/var/www/html/check/javascript-shop/client.v1/src/http/index.js"],"names":["axios","guestInstance","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","authInstance","authInterceptor","config","token","localStorage","getItem","headers","authorization","interceptors","request","use"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADU;AAE/BC,EAAAA,eAAe,EAAE;AAFc,CAAb,CAAtB;AAKA,MAAMC,YAAY,GAAGR,KAAK,CAACE,MAAN,CAAa;AAC9BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADS;AAE9BC,EAAAA,eAAe,EAAE;AAFa,CAAb,CAArB,C,CAKA;;AACA,MAAME,eAAe,GAAIC,MAAD,IAAY;AAChC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+B,YAAYH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3C;AACH;;AACD,SAAOH,MAAP;AACH,CAND;;AAOAF,YAAY,CAACQ,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCT,eAAtC;AAEA,SACIR,aADJ,EAEIO,YAFJ","sourcesContent":["import axios from 'axios'\n\nconst guestInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    withCredentials: true\n})\n\nconst authInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    withCredentials: true\n})\n\n// добавляем в запрос данные для авторизации с помощью перехватчика (interceptor)\nconst authInterceptor = (config) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        config.headers.authorization = 'Bearer ' + localStorage.getItem('token')\n    }\n    return config\n}\nauthInstance.interceptors.request.use(authInterceptor)\n\nexport {\n    guestInstance,\n    authInstance\n}"]},"metadata":{},"sourceType":"module"}