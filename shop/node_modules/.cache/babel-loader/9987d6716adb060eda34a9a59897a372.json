{"ast":null,"code":"import axios from'axios';var guestInstance=axios.create({baseURL:process.env.REACT_APP_API_URL,withCredentials:true});var authInstance=axios.create({baseURL:process.env.REACT_APP_API_URL,withCredentials:true});// добавляем в запрос данные для авторизации с помощью перехватчика (interceptor)\nvar authInterceptor=function authInterceptor(config){var token=localStorage.getItem('token');if(token){config.headers.authorization='Bearer '+localStorage.getItem('token');}return config;};authInstance.interceptors.request.use(authInterceptor);export{guestInstance,authInstance};","map":{"version":3,"sources":["/var/www/html/check/javascript-shop/client.v1/src/http/index.js"],"names":["axios","guestInstance","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","authInstance","authInterceptor","config","token","localStorage","getItem","headers","authorization","interceptors","request","use"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,aAAa,CAAGD,KAAK,CAACE,MAAN,CAAa,CAC/BC,OAAO,CAAEC,OAAO,CAACC,GAAR,CAAYC,iBADU,CAE/BC,eAAe,CAAE,IAFc,CAAb,CAAtB,CAKA,GAAMC,CAAAA,YAAY,CAAGR,KAAK,CAACE,MAAN,CAAa,CAC9BC,OAAO,CAAEC,OAAO,CAACC,GAAR,CAAYC,iBADS,CAE9BC,eAAe,CAAE,IAFa,CAAb,CAArB,CAKA;AACA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,MAAD,CAAY,CAChC,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAIF,KAAJ,CAAW,CACPD,MAAM,CAACI,OAAP,CAAeC,aAAf,CAA+B,UAAYH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3C,CACH,CACD,MAAOH,CAAAA,MAAP,CACH,CAND,CAOAF,YAAY,CAACQ,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCT,eAAtC,EAEA,OACIR,aADJ,CAEIO,YAFJ","sourcesContent":["import axios from 'axios'\n\nconst guestInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    withCredentials: true\n})\n\nconst authInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    withCredentials: true\n})\n\n// добавляем в запрос данные для авторизации с помощью перехватчика (interceptor)\nconst authInterceptor = (config) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        config.headers.authorization = 'Bearer ' + localStorage.getItem('token')\n    }\n    return config\n}\nauthInstance.interceptors.request.use(authInterceptor)\n\nexport {\n    guestInstance,\n    authInstance\n}"]},"metadata":{},"sourceType":"module"}